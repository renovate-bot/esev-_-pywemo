# https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
name: Push build changes

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches:
      - dependabot/**
      - pywemo_esev_pr

permissions: {}  # No permissions by default. Permissions are added per-job.

jobs:
  push:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'failure' &&
      github.event.workflow_run.head_repository.full_name == github.repository &&
      github.actor == 'esev'
    permissions:
      contents: write
    steps:
      - name: Download build changes
        id: download
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              ...context.repo,
              run_id: ${{github.event.workflow_run.id}},
            });
            const buildChangesArtifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith("build-changes-");
            });
            if (buildChangesArtifacts.length < 1) {
              return '';
            }
            const download = await github.rest.actions.downloadArtifact({
              ...context.repo,
              artifact_id: buildChangesArtifacts[0].id,
              archive_format: 'zip',
            });
            await io.mkdirP('${{github.workspace}}/download');
            const fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/download/build-changes.zip', Buffer.from(download.data));
            return '${{github.workspace}}/download/build-changes.zip';
      - name: Checkout code
        if: steps.download.outputs.result
        uses: actions/checkout@v3
        with:
          ref: ${{github.event.workflow_run.head_branch}}
          path: pywemo_checkout
      - name: Apply changes
        if: steps.download.outputs.result
        env:
          CHANGES_ZIP: ${{steps.download.outputs.result}}
        working-directory: pywemo_checkout
        run: |
          (cd $(dirname "$CHANGES_ZIP") && unzip $(basename "$CHANGES_ZIP"))
          git apply --no-add --cached "$(dirname "$CHANGES_ZIP")/build-changes.patch"
      - name: Push changes
        if: steps.download.outputs.result
        uses: actions/github-script@v6
        with:
          # https://github.com/orgs/community/discussions/50055
          script: |
            // Configure exec options. Will write stdout to 'output'.
            let output = '';
            const options = {
              listeners: {stdout: (data) => { output += data.toString(); }},
              cwd: './pywemo_checkout'
            };

            // Add the modified files to treeObjs.
            await exec.exec('git', ['diff-index', '--cached', 'HEAD'], options);
            const treeObjs = [];
            for (let diff of output.split('\n')) {
              const start = diff.split(':', 2)[1]
              const [metas, path] = start.split('\t', 2);
              const meta = metas.split(' ');
              if (meta.length < 5 || meta[4] !== 'M') continue;

              // Fetch the file contents into 'output'.
              output = '';
              await exec.exec('git', ['cat-file', 'blob', meta[3]], options);

              treeObjs.push({
                path: path,
                mode: meta[1],
                type: 'blob',
                content: output
              });
            }

            // Create a new tree containing the changed blobs.
            const tree = await github.rest.git.createTree({
              ...context.repo,
              tree: treeObjs,
              base_tree: '${{github.event.workflow_run.head_commit.tree_id}}'
            });
            console.log(tree);

            // Create a commit for the tree. This will be signed automatically.
            const gitCommit = await github.rest.git.createCommit({
              ...context.repo,
              message: '[dependabot skip] build changes for ${{github.event.workflow_run.head_commit.id}}',
              tree: tree.data.sha,
              parents: ['${{github.event.workflow_run.head_commit.id}}'],
            });
            console.log(gitCommit);

            // Update the branch HEAD to the new commit.
            const ref = await github.rest.git.updateRef({
              ...context.repo,
              ref: 'heads/${{github.event.workflow_run.head_branch}}',
              sha: gitCommit.data.sha,
            });
            console.log(ref);
